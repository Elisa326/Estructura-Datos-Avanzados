package ejercicios;

public class ordenamiento {

    public static int[] ordenarArreglo(int[] arr) {

        for (int j = 0; j < arr.length - 1; j++) {
            int menor = arr[j];
            int ind = j;
            for (int i = j + 1; i < arr.length; i++) {
                if (menor > arr[i]) {
                    menor = arr[i];
                    ind = i;
                    int auxi = arr[j];
                    arr[j] = arr[i];
                    arr[i] = auxi;
                }
            }
        }
        return arr;
    }
    
    public static int[] ordenarLapsosArreglo(int[] arr){
        for(int i = 0; i < arr.length - 1; i++){
            if(arr[i] > arr[i + 1]){
                int aux = arr[i + 1];
                int j = i + 1;
                while(j > 0 && arr[j - 1] > aux ){
                    arr[j] = arr[j - 1];
                    j--;
                }
                arr[j] = aux;                  
            }
        }
        return arr;
    }
    public static int[] ordenarPorParejas(int[] arr) {
       
        boolean cambio = true;
        while (cambio) {
            cambio = false;
            for (int i = 0; i < arr.length - 1; i++) {
                if (arr[i] > arr[i + 1]) {
                    int aux = arr[i + 1];
                    arr[i + 1] = arr[i];
                    arr[i] = aux;
                    cambio = true;
                }
            }
        }
        return arr;
    }
    
    public static String imprimeArray(int[] arr) {
        StringBuilder res = new StringBuilder();
        res.append("{");
        for (int i = 0; i < arr.length; i++) {
            res.append(arr[i]).append("  ");
        }
        res.append("}");
        return res.toString();
    }

    public static void main(String[] args) {
        int[] arr = new int[]{25, 2000, 3, 33, -1, 666, 51, 777, 10};
        System.out.println(imprimeArray(arr));
        System.out.println(imprimeArray(ordenarPorParejas(arr)));
    }
    
    public static int[] ordenaRecursiva(int[] arr){
        return ordenaRecursiva(arr, 0, arr.length - 1);
    } 
    
    
    
    //Ordena y luego agrega al arreglo
    private static int[] ordenaRecursiva(int[] arr, int inf, int sup){
        //System.out.println(imprimeArray(arr));
        //System.out.println("inferior = " + inf + "\nsuperior = " + sup);
        if (inf < sup) {

            int base = arr[inf];
            //System.out.println("base = " + base);
            int[] menores = new int[sup - inf + 1];
            int tMe = 0;
            int[] mayores = new int[sup - inf + 1];
            int tMa = 0;
            for (int i = inf + 1; i <= sup; i++) {
                if (arr[i] <= base) {
                    menores[tMe] = arr[i];
                    //System.out.println("Menores agrega: " + arr[i]);
                    tMe++;
                } else {
                    mayores[tMa] = arr[i];
                    //System.out.println("Mayores agrega: " + arr[i]);
                    tMa++;
                }
            }
            menores = ordenaRecursiva(menores, 0, tMe - 1);
            mayores = ordenaRecursiva(mayores, 0, tMa - 1);
            //System.out.println("tMe = " + tMe + "\ntMa = " + tMa);
            
            for (int j = 0; j < tMe + tMa + 1; j++) {
                if (j < tMe) {
                    arr[j] = menores[j];
                } else if (j == tMe) {
                    arr[j] = base;
                } else {
                    
                    arr[j] = mayores[j - tMe - 1]; 
                }
            }
        }
        return arr;
    
    }
    
    
    
    
    
    
    public static int[] quickSort(int[] arr) {
        return quickSort(arr, 0, arr.length - 1);
    }

    private static int[] quickSort(int[] arr, int inf, int sup) {
        if (inf < sup) {
            int iBase = inf;
            int base = arr[inf];
            int aux;
            for(int i = inf + 1; i <= sup; i++){
                if(arr[i] < base){
                    aux = arr[iBase + 1];
                    arr[iBase] = arr[i];
                    arr[i] = aux;
                    arr[iBase + 1] = base;
                    iBase++;
                }
            }
            arr = quickSort(arr, inf, iBase - 1);
            arr = quickSort(arr, iBase + 1, sup);
        }
        
        return arr;
    }
    
    
}
