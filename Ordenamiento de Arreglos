public class OrdenamientoAUsar <T extends Comparable<T>> {

    public static void main(String[] args) {

        T[] arr = new T[8];
        arr[0] = 303;
        arr[1] = 30;
        arr[2] = 430;
        arr[3] = 103;
        arr[4] = 4;
        arr[5] = 13;
        arr[6] = 4300;
        arr[7] = 10;
        for (int j = 0; j < arr.length; j++) {
            System.out.print(arr[j] + " ");
        }
        System.out.println(" ");

        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        
        selectionSort(arr);

    }
    
    
    

    //SELECTION-SORT:
    public  void selectionSort(T[] arr) {
        int min;
        T aux;
        for (int i = 0; i < arr.length; i++) {
            min = i;
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[j].compareTo(arr[min]) < 0) {
                    min = j;
                }
            }
            aux = arr[i];
            arr[i] = arr[min];
            arr[min] = aux;
        }
    }

    public static <T> void insertionSort(T[] arr) {
        int rec, pos;
        T aux;
        for (int i = 0; i < arr.length - 1; i++) {
            rec = i;
            pos = i + 1;
            while (rec >= 0 && arr[rec].compareTo(arr[pos]) > 0) {
                aux = arr[rec];
                arr[rec] = arr[pos];
                arr[pos] = aux;
                rec--;
                pos--;
            }
        }
    }
    //CLASSICAL-BUBBLE-SORT:

    public void bubbleSort(T[] arr) {
        T aux;
        for (int i = 0; i < arr.length - 1; i++) {
            for (int j = 0; j < arr.length - i - 1; j++) {
                if (arr[j].compareTo(arr[j + 1]) > 0) {
                    aux = arr[j + 1];
                    arr[j + 1] = arr[j];
                    arr[j] = aux;
                }
            }
        }

    }
    //QUICK-SORT:

    /* Complejidad: O(n^2)
        ** Nota: Para que un hacker no abuse de mi método hay que agarrar un número aleatorio. */
public  T[] quickSort(T[] arr) {
        return quickSort(arr, 0, arr.length - 1);
    }

    private T[] quickSort(T[] arr, int inf, int sup) {
        if (inf < sup) {
            int iBase = inf;
            T base = arr[inf];
            T aux;
            for(int i = inf + 1; i <= sup; i++){
                if(arr[i].compareTo(base) < 0){
                    aux = arr[iBase + 1];
                    arr[iBase] = arr[i];
                    arr[i] = aux;
                    arr[iBase + 1] = base;
                    iBase++;
                }
            }
            arr = quickSort(arr, inf, iBase - 1);
            arr = quickSort(arr, iBase + 1, sup);
        }
        
        return arr;
    }
    
    //RECURSIVE MERGE_SORT:

 public void mergeSort1(T[] arr){
        mergeSort(arr, 0, arr.length - 1);
    }
    
    private void mergeSort(T[] arr, int inf, int sup) {
        T[] temp;
        int indice, izq, der;
        if (inf == sup) {

            return;
        }
        int tam = sup - inf + 1;
        int mit = (sup + inf) / 2;
        temp = (T[])(new Comparable[tam]);
        
        mergeSort(arr, inf, mit); 
        mergeSort(arr, mit + 1, sup);
        indice = 0;
        izq = inf;
        der = mit + 1;
        
       
        while (indice < tam) {
             
            if (izq <= mit && der <= sup) {
                
                if (arr[izq].compareTo(arr[der]) < 0) {
                    
                    temp[indice] = arr[izq];
                    izq++;
                } else {
                   
                    temp[indice] = arr[der];
                    der++;
                }
            }
            else if(izq == mit + 1){
                
               temp[indice] = arr[der];
                der++;
            }
            else{   
                temp[indice] = arr[izq];
                izq++;
            }
            indice++;
            for(int ha = 0; ha < arr.length; ha++)
                 System.out.print(arr[ha]+ " ");
            System.out.println(" ");
        }
        for(int i = 0; i < tam; i++){
            arr[i + inf] = temp[i];
            for(int ha = 0; ha < arr.length; ha++)
                 System.out.print(arr[ha]+ " ");
            System.out.println(" ");
        }       
    }

    //ITERATIVE MERGE_SORT:
    /*Merge subarrays in bottom up manner. First merge subarrays of size 1 to create sorted  
          subarrays of size 2, then merge subarrays of size 2 to create sorted subarrays of size 4, 
          and so on. */
    public void iterativeMergeSort(T arr[]) {
        int n = arr.length;
        // For current size of subarrays to be merged curr_size varies from  1 to n/2 
        for (int curr_size = 1; curr_size <= n - 1; curr_size = 2 * curr_size) {

            // Pick starting point of different subarrays of current size 
            // For picking starting index of left subarray to be merged 
            for (int left_start = 0; left_start < n - 1; left_start += 2 * curr_size) {
                // Find ending point of left subarray. mid+1 is starting point of right: 
                int mid = Math.min(left_start + curr_size - 1, n - 1);

                int right_end = Math.min(left_start + 2 * curr_size - 1, n - 1);

                // Merge Subarrays arr[left_start...mid] & arr[mid+1...right_end]:
                merge(arr, left_start, mid, right_end);
                //mergeDiegoIndices(arr, left_start, right_end);

            }
        }
    }

    //MERGE-FUNCTION:
    /* Function to merge the two haves arr[l..m] and arr[m+1..r] of array arr[] */
    public void merge(T arr[], int l, int m, int r) {
        int i, j, k;
        int n1 = m - l + 1;
        int n2 = r - m;

        /* create temp arrays */
        T L[] = (T[]) new Comparable[n1];
        T R[] = (T[]) new Comparable[n2];

        /* Copy data to temp arrays L[] and R[] */
        for (i = 0; i < n1; i++) {
            L[i] = arr[l + i];
        }
        for (j = 0; j < n2; j++) {
            R[j] = arr[m + 1 + j];
        }

        /* Merge the temp arrays back into arr[l..r]*/
        i = 0;
        j = 0;
        k = l;
        while (i < n1 && j < n2) {
            if (L[i].compareTo(R[j]) <= 0) {
                arr[k++] = L[i++];
            } else {
                arr[k++] = R[j++];
            }
        }
        /* Copy the remaining elements of L[], if there are any */
        while (i < n1) {
            arr[k++] = L[i++];
        }
        /* Copy the remaining elements of R[], if there are any */
        while (j < n2) {
            arr[k++] = R[j++];
        }
    }

}

